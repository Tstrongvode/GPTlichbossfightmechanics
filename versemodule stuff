A Verse module is an atomic unit of code that can be redistributed and depended upon, and can evolve over time without breaking dependencies. You can import a module into your Verse file to use code definitions from other Verse files.

A Verse module is specified by the folder in the file hierarchy of the project, and the module's name is the name of the folder. All .verse files in the same folder as the file are part of that Verse module, and can access definitions from the other Verse files in the module without explicitly importing the module.

A module is identified by its path; for example, /Verse.org/Verse. Verse paths provide a global namespace for identifying things, and borrow from the idea of web domains. These paths are persistent and unique, and discoverable by any Verse programmer.

For a list of existing Verse modules, see the Verse API Reference.

Module Members
You can create modules within a .verse file using the following syntax:

module1 := module:
    ...

# Similar to classes and function, bracket syntax is also supported
module2 := module
{
    ...
}
A module defined in the Verse file can contain anything that is contained at the top level of a .verse file. This includes functions, constants, various types, as well as other module definitions. For example:

module := module:
    submodule<public> := module:
        submodule_class<public> := class {}
    module_class<public> := class{}
The contents of a submodule can be referred to using the name of the module qualified with the name of the base module. For example, class1 can be referred to outside of module1 as module1.module2.class1.

Importing Definitions from Other Verse Files
To use the contents of a Verse module, you must import the module by its path. For example, the following code imports the Random module, identified by the path /Verse.org/Random:

using { /Verse.org/Random }
When the Random module is imported into your Verse file, you can use its code definitions, such as the function GetRandomInt().

Other common module examples include the Devices, Simulation, and Diagnostics modules, all of which are imported by default when you create a new Verse file through UEFN.

using { /Fortnite.com/Devices }
using { /Verse.org/Simulation }
using { /UnrealEngine.com/Temporary/Diagnostics }
To import modules from other Verse files, you can use either a local path such as using { /YourVerseFolder/your_module }, or if the file is in the same directory, just using { your_module }.

You can import nested modules either by importing base modules before submodule modules, or by using dotted notation. For instance, given the modules:

base_module<public> := module:
    submodule<public> := module:
        submodule_class := class:
            ...
If you want to access members in submodule, you can either import it by importing base_module before submodule, or by importing base_module.submodule. Note that importing submodule before base_module will produce an error.

# Works and imports both base and submodules
using { base_module }
using { submodule }

# Works and imports only the submodule
using { base_module.submodule }

# Does not work
using { submodule }
using { base_module }
When you create a subfolder in a Verse project, a module is automatically created for that folder. For example, if base_module was defined in a folder module_folder, then module_folder would have its own module that contains base_module.

Another way to view this is that the file structure module_folder/base_module is the same as the following:

module_folder := module:
    base_module := module:
        submodule := module:
            submodule_class := class:
                ...
Note that the module for module_folder would need to be imported before base_module.

# Imports the folder containing base_module and its submodule
using { module_folder }
using { base_module }
using { submodule }
Access of Definitions in a Module
The access of a module and its contents from other Verse files are set using access specifiers, such as public and internal.

By default, the access for definitions are internal, which means they're only discoverable within their own module. This is also true for modules introduced by folders in a project.

Because the default access specifier is internal, you can't access module members outside of the module without making them public. For instance:

# This module and its members are not accesible from other Verse Files.
private_module := module:
    SecretInt:int = 1
    ...

# But this module, its submodule, and its members are.
public_module<public> := module:
    public_submodule<public> := module:
        PublicInt<public>:int = 1
        ...
Note both the module and its members need to be public to access them in a different scope.

Verse API version: 26.20.

Welcome to the Verse API Reference! This is an automatically generated reference manual from the modules that currently exist in Verse. You can find all modules and their members here, organized hierarchically. We recommend you begin by browsing the modules, or using the left-side search bar to filter for a known term, such as a class or function name.

To get started, browse the following expanded, hierarchical list of all Verse modules. Everything that you can use in the Verse API exists within one of these modules. You can click on any module to go to its page, where you will find links to all of its direct members (such as classes, enumerated types, and so on), as well as related modules. You can also use the left-side content panel to browse through all API members.

Verse Module List
Verse.org (Top Level Module)

Verse

Simulation

Assets

Random

Colors

Native

Concurrency

UnrealEngine.com (Top Level Module)

Temporary
Fortnite.com (Top Level Module)

UI

Devices

InterpolationTypes
Vehicles

Teams

Playspaces

Game

FortPlayerUtilities

Characters

AI


AI module
Learn technical details about the AI module.

UEFNAI module
Module import path: /Fortnite.com/AI

Fortnite.com

AI

Classes and Structs
Name	Description
navigation_target	
Interfaces
Name	Description
focus_interface	
fort_leashable	
navigatable	
Functions
Name	Description
MakeNavigationTarget	
Generate a navigation_target from any position

MakeNavigationTarget	
Generate a navigation_target from an agent

Enumerations
Name	Description
navigation_result	
Result of a navigation request

ocus_interface interface
Learn technical details about the focus_interface interface.

UEFNfocus_interface interface
 	 
Verse using statement	using { /Fortnite.com/AI }
Members
This interface has functions, but no data members.

Functions
Function Name	Description
MaintainFocus	
Look At specified location. Will never complete unless interrupted.

MaintainFocus	
Look At specified Agent. Will never complete unless interrupted.

Look At specified location. Will never complete unless interrupted.

 	 
Verse using statement	using { /Fortnite.com/AI }
MaintainFocus<public>(Location:vector3)<suspends><varies><transacts><no_rollback>:void

Parameters
MaintainFocus takes the following parameters:

Name	Type	Description
Location	vector3	 
Attributes and Effects
The following attributes and effects determine how MaintainFocus behaves and how you can use it in your programs. For the complete list of attribute and effect specifiers, see the Specifiers Page.

Attribute	Meaning
public	The identifier is universally accessible. You can use this on modules, classes, interfaces, structs, enums, methods, and data.
Effect	Meaning
suspends	Indicates that the function is async. Creates an async context for the body of the function.
varies	This effect indicates that the same input to the function may not always produce the same output. The varies effect also indicates that the behavior of the function is not guaranteed to stay the same with new versions of its containing package.
transacts	This effect indicates that any actions performed by the function can be rolled back. The transacts effect is required any time a mutable variable (var) is written. You’ll be notified when you compile your code if the transacts effect was added to a function that can’t be rolled back. Note that this check is not done for functions with the native specifier.
no_rollback	This is the default effect when no exclusive effect is specified. The no_rollback effect indicates that any actions performed by the function cannot be undone and so the function cannot be used in a failure context. This effect cannot be manually specified.

Look At specified Agent. Will never complete unless interrupted.

 	 
Verse using statement	using { /Fortnite.com/AI }
MaintainFocus<public>(Agent:agent)<suspends><varies><transacts><no_rollback>:void

Parameters
MaintainFocus takes the following parameters:

Name	Type	Description
Agent	agent	 
Attributes and Effects
The following attributes and effects determine how MaintainFocus behaves and how you can use it in your programs. For the complete list of attribute and effect specifiers, see the Specifiers Page.

Attribute	Meaning
public	The identifier is universally accessible. You can use this on modules, classes, interfaces, structs, enums, methods, and data.
Effect	Meaning
suspends	Indicates that the function is async. Creates an async context for the body of the function.
varies	This effect indicates that the same input to the function may not always produce the same output. The varies effect also indicates that the behavior of the function is not guaranteed to stay the same with new versions of its containing package.
transacts	This effect indicates that any actions performed by the function can be rolled back. The transacts effect is required any time a mutable variable (var) is written. You’ll be notified when you compile your code if the transacts effect was added to a function that can’t be rolled back. Note that this check is not done for functions with the native specifier.
no_rollback	This is the default effect when no exclusive effect is specified. The no_rollback effect indicates that any actions performed by the function cannot be undone and so the function cannot be used in a failure context. This effect cannot be manually specified.

Verse using statement	using { /Fortnite.com/AI }
Members
This interface has functions, but no data members.

Functions
Function Name	Description
SetLeashPosition	
Set custom leash position. 'InnerRadius' ranges from 0.0 to 20000.0 (in centimeters). 'OuterRadius' ranges from 0.0 to 20000.0 (in centimeters) and no less than 'InnerRadius'.

SetLeashAgent	
Set the agent to be the new center of the leash. 'InnerRadius' ranges from 0.0 to 20000.0 (in centimeters). 'OuterRadius' ranges from 0.0 to 20000.0 (in centimeters) and no less than 'InnerRadius'.

ClearLeash	
Removes the current leash.

Removes the current leash.

 	 
Verse using statement	using { /Fortnite.com/AI }
ClearLeash<public>()<varies><transacts><no_rollback>:void

Parameters
ClearLeash does not take any parameters.

Attributes and Effects
The following attributes and effects determine how ClearLeash behaves and how you can use it in your programs. For the complete list of attribute and effect specifiers, see the Specifiers Page.

Attribute	Meaning
public	The identifier is universally accessible. You can use this on modules, classes, interfaces, structs, enums, methods, and data.
Effect	Meaning
varies	This effect indicates that the same input to the function may not always produce the same output. The varies effect also indicates that the behavior of the function is not guaranteed to stay the same with new versions of its containing package.
transacts	This effect indicates that any actions performed by the function can be rolled back. The transacts effect is required any time a mutable variable (var) is written. You’ll be notified when you compile your code if the transacts effect was added to a function that can’t be rolled back. Note that this check is not done for functions with the native specifier.
no_rollback	This is the default effect when no exclusive effect is specified. The no_rollback effect indicates that any actions performed by the function cannot be undone and so the function cannot be used in a failure context. This effect cannot be manually specified.

Set the agent to be the new center of the leash. 'InnerRadius' ranges from 0.0 to 20000.0 (in centimeters). 'OuterRadius' ranges from 0.0 to 20000.0 (in centimeters) and no less than 'InnerRadius'.

 	 
Verse using statement	using { /Fortnite.com/AI }
SetLeashAgent<public>(Agent:agent, InnerRadius:float, OuterRadius:float)<varies><transacts><no_rollback>:void

Parameters
SetLeashAgent takes the following parameters:

Name	Type	Description
Agent	agent	 
InnerRadius	float	 
OuterRadius	float	 
Attributes and Effects
The following attributes and effects determine how SetLeashAgent behaves and how you can use it in your programs. For the complete list of attribute and effect specifiers, see the Specifiers Page.

Attribute	Meaning
public	The identifier is universally accessible. You can use this on modules, classes, interfaces, structs, enums, methods, and data.
Effect	Meaning
varies	This effect indicates that the same input to the function may not always produce the same output. The varies effect also indicates that the behavior of the function is not guaranteed to stay the same with new versions of its containing package.
transacts	This effect indicates that any actions performed by the function can be rolled back. The transacts effect is required any time a mutable variable (var) is written. You’ll be notified when you compile your code if the transacts effect was added to a function that can’t be rolled back. Note that this check is not done for functions with the native specifier.
no_rollback	This is the default effect when no exclusive effect is specified. The no_rollback effect indicates that any actions performed by the function cannot be undone and so the function cannot be used in a failure context. This effect cannot be manually specified.



Set custom leash position. 'InnerRadius' ranges from 0.0 to 20000.0 (in centimeters). 'OuterRadius' ranges from 0.0 to 20000.0 (in centimeters) and no less than 'InnerRadius'.

 	 
Verse using statement	using { /Fortnite.com/AI }
SetLeashPosition<public>(Location:vector3, InnerRadius:float, OuterRadius:float)<varies><transacts><no_rollback>:void

Parameters
SetLeashPosition takes the following parameters:

Name	Type	Description
Location	vector3	 
InnerRadius	float	 
OuterRadius	float	 
Attributes and Effects
The following attributes and effects determine how SetLeashPosition behaves and how you can use it in your programs. For the complete list of attribute and effect specifiers, see the Specifiers Page.

Attribute	Meaning
public	The identifier is universally accessible. You can use this on modules, classes, interfaces, structs, enums, methods, and data.
Effect	Meaning
varies	This effect indicates that the same input to the function may not always produce the same output. The varies effect also indicates that the behavior of the function is not guaranteed to stay the same with new versions of its containing package.
transacts	This effect indicates that any actions performed by the function can be rolled back. The transacts effect is required any time a mutable variable (var) is written. You’ll be notified when you compile your code if the transacts effect was added to a function that can’t be rolled back. Note that this check is not done for functions with the native specifier.
no_rollback	This is the default effect when no exclusive effect is specified. The no_rollback effect indicates that any actions performed by the function cannot be undone and so the function cannot be used in a failure context. This effect cannot be manually specified.

Get the focus_interface interface for the specified character.

 	 
Verse using statement	using { /Fortnite.com/AI }
(InCharacter:fort_character).GetFocusInterface<native><public>()<decides><varies><transacts>:focus_interface

Parameters
GetFocusInterface takes the following parameters:

Name	Type	Description
InCharacter	fort_character	 
Attributes and Effects
The following attributes and effects determine how GetFocusInterface behaves and how you can use it in your programs. For the complete list of attribute and effect specifiers, see the Specifiers Page.

Attribute	Meaning
native	Indicates that the definition details of the element are implemented in C++. Verse definitions with the native specifier auto-generate C++ definitions that a developer can then fill out its implementation. You can use this specifier on classes, interfaces, enums, methods, and data.
public	The identifier is universally accessible. You can use this on modules, classes, interfaces, structs, enums, methods, and data.
Effect	Meaning
decides	Indicates that the function can fail, and that calling this function is a failable expression. Function definitions with the decides effect must also have the transacts effect, which means the actions performed by this function can be rolled back (as if the actions were never performed), if there’s a failure anywhere in the function.
varies	This effect indicates that the same input to the function may not always produce the same output. The varies effect also indicates that the behavior of the function is not guaranteed to stay the same with new versions of its containing package.
transacts	This effect indicates that any actions performed by the function can be rolled back. The transacts effect is required any time a mutable variable (var) is written. You’ll be notified when you compile your code if the transacts effect was added to a function that can’t be rolled back. Note that this check is not done for functions with the native specifier.

Get the current fort_leashable interface for the specified character.

 	 
Verse using statement	using { /Fortnite.com/AI }
(InCharacter:fort_character).GetFortLeashable<native><public>()<decides><varies><transacts>:fort_leashable

Parameters
GetFortLeashable takes the following parameters:

Name	Type	Description
InCharacter	fort_character	 
Attributes and Effects
The following attributes and effects determine how GetFortLeashable behaves and how you can use it in your programs. For the complete list of attribute and effect specifiers, see the Specifiers Page.

Attribute	Meaning
native	Indicates that the definition details of the element are implemented in C++. Verse definitions with the native specifier auto-generate C++ definitions that a developer can then fill out its implementation. You can use this specifier on classes, interfaces, enums, methods, and data.
public	The identifier is universally accessible. You can use this on modules, classes, interfaces, structs, enums, methods, and data.
Effect	Meaning
decides	Indicates that the function can fail, and that calling this function is a failable expression. Function definitions with the decides effect must also have the transacts effect, which means the actions performed by this function can be rolled back (as if the actions were never performed), if there’s a failure anywhere in the function.
varies	This effect indicates that the same input to the function may not always produce the same output. The varies effect also indicates that the behavior of the function is not guaranteed to stay the same with new versions of its containing package.
transacts	This effect indicates that any actions performed by the function can be rolled back. The transacts effect is required any time a mutable variable (var) is written. You’ll be notified when you compile your code if the transacts effect was added to a function that can’t be rolled back. Note that this check is not done for functions with the native specifier.

Get the navigatable interface for the specified character.

 	 
Verse using statement	using { /Fortnite.com/AI }
(InCharacter:fort_character).GetNavigatable<native><public>()<decides><varies><transacts>:navigatable

Parameters
GetNavigatable takes the following parameters:

Name	Type	Description
InCharacter	fort_character	 
Attributes and Effects
The following attributes and effects determine how GetNavigatable behaves and how you can use it in your programs. For the complete list of attribute and effect specifiers, see the Specifiers Page.

Attribute	Meaning
native	Indicates that the definition details of the element are implemented in C++. Verse definitions with the native specifier auto-generate C++ definitions that a developer can then fill out its implementation. You can use this specifier on classes, interfaces, enums, methods, and data.
public	The identifier is universally accessible. You can use this on modules, classes, interfaces, structs, enums, methods, and data.
Effect	Meaning
decides	Indicates that the function can fail, and that calling this function is a failable expression. Function definitions with the decides effect must also have the transacts effect, which means the actions performed by this function can be rolled back (as if the actions were never performed), if there’s a failure anywhere in the function.
varies	This effect indicates that the same input to the function may not always produce the same output. The varies effect also indicates that the behavior of the function is not guaranteed to stay the same with new versions of its containing package.
transacts	This effect indicates that any actions performed by the function can be rolled back. The transacts effect is required any time a mutable variable (var) is written. You’ll be notified when you compile your code if the transacts effect was added to a function that can’t be rolled back. Note that this check is not done for functions with the native specifier.

Generate a navigation_target from any position

 	 
Verse using statement	using { /Fortnite.com/AI }
MakeNavigationTarget<native><public>(Position:vector3)<varies><transacts><no_rollback>:navigation_target

Parameters
MakeNavigationTarget takes the following parameters:

Name	Type	Description
Position	vector3	 
Attributes and Effects
The following attributes and effects determine how MakeNavigationTarget behaves and how you can use it in your programs. For the complete list of attribute and effect specifiers, see the Specifiers Page.

Attribute	Meaning
native	Indicates that the definition details of the element are implemented in C++. Verse definitions with the native specifier auto-generate C++ definitions that a developer can then fill out its implementation. You can use this specifier on classes, interfaces, enums, methods, and data.
public	The identifier is universally accessible. You can use this on modules, classes, interfaces, structs, enums, methods, and data.
Effect	Meaning
varies	This effect indicates that the same input to the function may not always produce the same output. The varies effect also indicates that the behavior of the function is not guaranteed to stay the same with new versions of its containing package.
transacts	This effect indicates that any actions performed by the function can be rolled back. The transacts effect is required any time a mutable variable (var) is written. You’ll be notified when you compile your code if the transacts effect was added to a function that can’t be rolled back. Note that this check is not done for functions with the native specifier.
no_rollback	This is the default effect when no exclusive effect is specified. The no_rollback effect indicates that any actions performed by the function cannot be undone and so the function cannot be used in a failure context. This effect cannot be manually specified.

Generate a navigation_target from an agent

 	 
Verse using statement	using { /Fortnite.com/AI }
MakeNavigationTarget<native><public>(Target:agent)<varies><transacts><no_rollback>:navigation_target

Parameters
MakeNavigationTarget takes the following parameters:

Name	Type	Description
Target	agent	 
Attributes and Effects
The following attributes and effects determine how MakeNavigationTarget behaves and how you can use it in your programs. For the complete list of attribute and effect specifiers, see the Specifiers Page.

Attribute	Meaning
native	Indicates that the definition details of the element are implemented in C++. Verse definitions with the native specifier auto-generate C++ definitions that a developer can then fill out its implementation. You can use this specifier on classes, interfaces, enums, methods, and data.
public	The identifier is universally accessible. You can use this on modules, classes, interfaces, structs, enums, methods, and data.
Effect	Meaning
varies	This effect indicates that the same input to the function may not always produce the same output. The varies effect also indicates that the behavior of the function is not guaranteed to stay the same with new versions of its containing package.
transacts	This effect indicates that any actions performed by the function can be rolled back. The transacts effect is required any time a mutable variable (var) is written. You’ll be notified when you compile your code if the transacts effect was added to a function that can’t be rolled back. Note that this check is not done for functions with the native specifier.
no_rollback	This is the default effect when no exclusive effect is specified. The no_rollback effect indicates that any actions performed by the function cannot be undone and so the function cannot be used in a failure context. This effect cannot be manually specified.

Verse using statement	using { /Fortnite.com/AI }
Members
This interface has functions, but no data members.

Functions
Function Name	Description
GetCurrentDestination	
Return the current destination of the NPC

NavigateTo	
Navigate toward the specified target

StopNavigation	
Stop navigation

Wait	
Wait for a specific duration



Return the current destination of the NPC

 	 
Verse using statement	using { /Fortnite.com/AI }
GetCurrentDestination<public>()<decides><varies><transacts>:vector3

Parameters
GetCurrentDestination does not take any parameters.

Attributes and Effects
The following attributes and effects determine how GetCurrentDestination behaves and how you can use it in your programs. For the complete list of attribute and effect specifiers, see the Specifiers Page.

Attribute	Meaning
public	The identifier is universally accessible. You can use this on modules, classes, interfaces, structs, enums, methods, and data.
Effect	Meaning
decides	Indicates that the function can fail, and that calling this function is a failable expression. Function definitions with the decides effect must also have the transacts effect, which means the actions performed by this function can be rolled back (as if the actions were never performed), if there’s a failure anywhere in the function.
varies	This effect indicates that the same input to the function may not always produce the same output. The varies effect also indicates that the behavior of the function is not guaranteed to stay the same with new versions of its containing package.
transacts	This effect indicates that any actions performed by the function can be rolled back. The transacts effect is required any time a mutable variable (var) is written. You’ll be notified when you compile your code if the transacts effect was added to a function that can’t be rolled back. Note that this check is not done for functions with the native specifier.

Navigate toward the specified target

 	 
Verse using statement	using { /Fortnite.com/AI }
NavigateTo<public>(Target:navigation_target, ReachRadius:float, AllowPartialPath:logic)<suspends><varies><transacts><no_rollback>:navigation_result

Parameters
NavigateTo takes the following parameters:

Name	Type	Description
Target	navigation_target	 
ReachRadius	float	 
AllowPartialPath	logic	 
Attributes and Effects
The following attributes and effects determine how NavigateTo behaves and how you can use it in your programs. For the complete list of attribute and effect specifiers, see the Specifiers Page.

Attribute	Meaning
public	The identifier is universally accessible. You can use this on modules, classes, interfaces, structs, enums, methods, and data.
Effect	Meaning
suspends	Indicates that the function is async. Creates an async context for the body of the function.
varies	This effect indicates that the same input to the function may not always produce the same output. The varies effect also indicates that the behavior of the function is not guaranteed to stay the same with new versions of its containing package.
transacts	This effect indicates that any actions performed by the function can be rolled back. The transacts effect is required any time a mutable variable (var) is written. You’ll be notified when you compile your code if the transacts effect was added to a function that can’t be rolled back. Note that this check is not done for functions with the native specifier.
no_rollback	This is the default effect when no exclusive effect is specified. The no_rollback effect indicates that any actions performed by the function cannot be undone and so the function cannot be used in a failure context. This effect cannot be manually specified.

Stop navigation

 	 
Verse using statement	using { /Fortnite.com/AI }
StopNavigation<public>()<varies><transacts><no_rollback>:void

Parameters
StopNavigation does not take any parameters.

Attributes and Effects
The following attributes and effects determine how StopNavigation behaves and how you can use it in your programs. For the complete list of attribute and effect specifiers, see the Specifiers Page.

Attribute	Meaning
public	The identifier is universally accessible. You can use this on modules, classes, interfaces, structs, enums, methods, and data.
Effect	Meaning
varies	This effect indicates that the same input to the function may not always produce the same output. The varies effect also indicates that the behavior of the function is not guaranteed to stay the same with new versions of its containing package.
transacts	This effect indicates that any actions performed by the function can be rolled back. The transacts effect is required any time a mutable variable (var) is written. You’ll be notified when you compile your code if the transacts effect was added to a function that can’t be rolled back. Note that this check is not done for functions with the native specifier.
no_rollback	This is the default effect when no exclusive effect is specified. The no_rollback effect indicates that any actions performed by the function cannot be undone and so the function cannot be used in a failure context. This effect cannot be manually specified.



Wait for a specific duration

 	 
Verse using statement	using { /Fortnite.com/AI }
Wait<public>(Duration:float)<suspends><varies><transacts><no_rollback>:void

Parameters
Wait takes the following parameters:

Name	Type	Description
Duration	float	 
Attributes and Effects
The following attributes and effects determine how Wait behaves and how you can use it in your programs. For the complete list of attribute and effect specifiers, see the Specifiers Page.

Attribute	Meaning
public	The identifier is universally accessible. You can use this on modules, classes, interfaces, structs, enums, methods, and data.
Effect	Meaning
suspends	Indicates that the function is async. Creates an async context for the body of the function.
varies	This effect indicates that the same input to the function may not always produce the same output. The varies effect also indicates that the behavior of the function is not guaranteed to stay the same with new versions of its containing package.
transacts	This effect indicates that any actions performed by the function can be rolled back. The transacts effect is required any time a mutable variable (var) is written. You’ll be notified when you compile your code if the transacts effect was added to a function that can’t be rolled back. Note that this check is not done for functions with the native specifier.
no_rollback	This is the default effect when no exclusive effect is specified. The no_rollback effect indicates that any actions performed by the function cannot be undone and so the function cannot be used in a failure context. This effect cannot be manually specified.

Result of a navigation request

 	 
Verse using statement	using { /Fortnite.com/AI }
Enumerators
The navigation_result enumeration includes the following enumerators:

Name	Description
Reached	
The destination has been reached

PartiallyReached	
The destination has been partially reached (AllowPartialPath was used)

Interrupted	
Navigation has been interrupted before completion

Blocked	
The navigating agent is blocked

Unreachable	
The destination cannot be reached

navigation_target class
Learn technical details about the navigation_target class.

UEFNnavigation_target class
 	 
Verse using statement	using { /Fortnite.com/AI }

Characters module
Learn technical details about the Characters module.

UEFNCharacters module
Module import path: /Fortnite.com/Characters

Fortnite.com

Characters

Classes and Structs
Name	Description
character_modifier	
stasis_args	
Parameters for fort_character.PutInStasis function.

Interfaces
Name	Description
fort_character	
Main API implemented by Fortnite characters.

Verse using statement	using { /Fortnite.com/Characters }
OnCharacterSpawned<native_callable><public>(Character:fort_character)<varies><transacts><no_rollback>:void

Parameters
OnCharacterSpawned takes the following parameters:

Name	Type	Description
Character	fort_character	 
Attributes and Effects
The following attributes and effects determine how OnCharacterSpawned behaves and how you can use it in your programs. For the complete list of attribute and effect specifiers, see the Specifiers Page.

Attribute	Meaning
native_callable	Indicates that an instance method is both native (implemented in C++) and may be called by other C++ code. You can see this specifier used on an instance method. This specifier doesn’t propagate to subclasses and so you don’t need to add it to a definition when overriding a method that has this specifier.
public	The identifier is universally accessible. You can use this on modules, classes, interfaces, structs, enums, methods, and data.
Effect	Meaning
varies	This effect indicates that the same input to the function may not always produce the same output. The varies effect also indicates that the behavior of the function is not guaranteed to stay the same with new versions of its containing package.
transacts	This effect indicates that any actions performed by the function can be rolled back. The transacts effect is required any time a mutable variable (var) is written. You’ll be notified when you compile your code if the transacts effect was added to a function that can’t be rolled back. Note that this check is not done for functions with the native specifier.
no_rollback	This is the default effect when no exclusive effect is specified. The no_rollback effect indicates that any actions performed by the function cannot be undone and so the function cannot be used in a failure context. This effect cannot be manually specified.







